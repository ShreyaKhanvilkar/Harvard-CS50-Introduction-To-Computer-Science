import csv
import sys


def main():

    # Check for command-line usage
    # Needs two files
    if len(sys.argv) != 3:
        sys.exit("Usage: python dna.py FILENAME")

    # Read database file into a variable
    data = []
    # opens, reads, and puts into data
    # this provides a dict in a list
    with open(sys.argv[1]) as file:
        reader = csv.DictReader(file)
        for line in reader:
            data.append(line)

    # Read DNA sequence file into a variable
    # opens, reads, and puts into dna
    with open(sys.argv[2]) as file:
        reader == csv.DictReader(file)
        dna = file.read()

    # Find longest match of each STR in DNA sequence
    '''
    names - list of all names in data file also removes all names from data file
    value - number of longest matches
    turns values into dict for easier matching
    '''
    names = [i.pop("name") for i in data]
    value = [str(longest_match(dna, i)) for i in data[0]]
    match = dict(zip([i for i in data[0]], value))

    # TODO: Check database for matching profiles
    '''
    count - keeps track of name of data
    iterates through DNA sequences numbers
    match - takes values from data
    checks value against every match
    prints name corresponding to matched
    exits so that "No Match" isn't printed
    updates count (for names)
    '''
    count = 0
    for i in data:
        match = list(i.values())
        if match == value:      
            print(names[count])     
            sys.exit() 
        count += 1
    print("No Match")


def longest_match(sequence, subsequence):
    """Returns length of longest run of subsequence in sequence."""

    # Initialize variables
    longest_run = 0
    subsequence_length = len(subsequence)
    sequence_length = len(sequence)

    # Check each character in sequence for most consecutive runs of subsequence
    for i in range(sequence_length):

        # Initialize count of consecutive runs
        count = 0

        # Check for a subsequence match in a "substring" (a subset of characters) within sequence
        # If a match, move substring to next potential match in sequence
        # Continue moving substring and checking for matches until out of consecutive matches
        while True:

            # Adjust substring start and end
            start = i + count * subsequence_length
            end = start + subsequence_length

            # If there is a match in the substring
            if sequence[start:end] == subsequence:
                count += 1

            # If there is no match in the substring
            else:
                break

        # Update most consecutive matches found
        longest_run = max(longest_run, count)

    # After checking for runs at each character in seqeuence, return longest run found
    return longest_run


main()
