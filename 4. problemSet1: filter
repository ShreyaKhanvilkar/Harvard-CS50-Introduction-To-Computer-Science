#include "helpers.h"
#include <math.h>

// Convert image to grayscale
void grayscale(int height, int width, RGBTRIPLE image[height][width])
{
    for (int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {
            // find average and set to image
            int avg = round((image[i][j].rgbtBlue + image[i][j].rgbtGreen + image[i][j].rgbtRed) / 3.0);
            image[i][j].rgbtBlue = image[i][j].rgbtGreen = image[i][j].rgbtRed = avg;
        }
    }
    return;
}

// Reflect image horizontally
void reflect(int height, int width, RGBTRIPLE image[height][width])
{
    for (int i = 0; i < height; i++)
    {
        // if row length is even
        if (width % 2 == 0)
        {
            // break in half and swap each pixel
            for (int j = 0; j < width / 2; j++)
            {
                RGBTRIPLE t[height][width];
                t[i][j] = image[i][j];
                image[i][j] = image[i][width - (j + 1)];
                image[i][width - (j + 1)] = t[i][j];
            }
        }
        // else if row length is odd
        else
        {
            // break in half and swap each pixed but the middle two
            for (int j = 0; j < (width - 1) / 2; j++)
            {
                RGBTRIPLE t[height][width];
                t[i][j] = image[i][j];
                image[i][j] = image[i][width - (j + 1)];
                image[i][width - (j + 1)] = t[i][j];
            }
        }
    }
    return;
}

// Blur image
void blur(int height, int width, RGBTRIPLE image[height][width])
{
    // temporary hashmap
    RGBTRIPLE t[height][width];

    // iterate through all squares that are not edges
    for (int i = 1; i < height - 1; i++)
    {
        for (int j = 1; j < width - 1; j++)
        {
            // initilize color variables
            float red = 0, green = 0, blue = 0;
            for (int r = -1; r < 2; r++)
            {
                for (int c = -1; c < 2; c++)
                {
                    red += image[i + r][j + c].rgbtRed, green += image[i + r][j + c].rgbtGreen, blue += image[i + r][j + c].rgbtBlue;
                }
            }
            t[i][j].rgbtRed = round(red / 9), t[i][j].rgbtGreen = round(green / 9), t[i][j].rgbtBlue = round(blue / 9);
        }
    }

    //edges
    for (int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {
            float red = 0, green = 0, blue = 0;

            // corner pieces
            if ((i == 0 && j == 0) || (i == 0 && j == width - 1) || (i == height - 1 && j == 0))
            {
                for (int r = 0; r < 2; r++)
                {
                    for (int c = 0; c < 2; c++)
                    {
                        // top left
                        if (i == 0 && j == 0)
                        {
                            red += image[i + r][j + c].rgbtRed, green += image[i + r][j + c].rgbtGreen, blue += image[i + r][j + c].rgbtBlue;
                        }
                    }
                    for (int c = -1; c < 1; c++)
                    {
                        // top-right
                        if (i == 0 && j == width - 1)
                        {
                            red += image[i + r][j + c].rgbtRed, green += image[i + r][j + c].rgbtGreen, blue += image[i + r][j + c].rgbtBlue;
                        }
                    }
                    for (int c = -1; c < 1; c++)
                    {
                        // bottom-left
                        if (i == height - 1 && j == 0)
                        {
                            red += image[i + c][j + r].rgbtRed, green += image[i + c][j + r].rgbtGreen, blue += image[i + c][j + r].rgbtBlue;
                        }
                    }
                }
                t[i][j].rgbtRed = round(red / 4), t[i][j].rgbtGreen = round(green / 4), t[i][j].rgbtBlue = round(blue / 4);
            }
            // bottom-right
            if (i == height - 1 && j == width - 1)
            {
                for (int r = -1; r < 1; r++)
                {
                    for (int c = -1; c < 1; c++)
                    {
                        red += image[i + r][j + c].rgbtRed, green += image[i + r][j + c].rgbtGreen, blue += image[i + r][j + c].rgbtBlue;
                    }
                }
                t[i][j].rgbtRed = round(red / 4), t[i][j].rgbtGreen = round(green / 4), t[i][j].rgbtBlue = round(blue / 4);
            }

            // left and up and right and down side edge pieces
            if (((j == 0 || j == width - 1) && i > 0 && i < height - 1) || ((i == 0 || i == height - 1) && j > 0 && j < width - 1))
            {
                for (int r = -1; r < 2; r++)
                {
                    // left and up
                    for (int c = 0; c < 2; c++)
                    {
                        // left
                        if (j == 0)
                        {
                            red += image[i + r][j + c].rgbtRed, green += image[i + r][j + c].rgbtGreen, blue += image[i + r][j + c].rgbtBlue;
                        }
                        // up
                        if (i == 0)
                        {
                            red += image[i + c][j + r].rgbtRed, green += image[i + c][j + r].rgbtGreen, blue += image[i + c][j + r].rgbtBlue;
                        }
                    }
                    // right and down
                    for (int c = -1; c < 1; c++)
                    {
                        // right
                        if (j == width - 1)
                        {
                            red += image[i + r][j + c].rgbtRed, green += image[i + r][j + c].rgbtGreen, blue += image[i + r][j + c].rgbtBlue;
                        }
                        // down
                        if (i == height - 1)
                        {
                            red += image[i + c][j + r].rgbtRed, green += image[i + c][j + r].rgbtGreen, blue += image[i + c][j + r].rgbtBlue;
                        }
                    }
                }
                t[i][j].rgbtRed = round(red / 6), t[i][j].rgbtGreen = round(green / 6), t[i][j].rgbtBlue = round(blue / 6);
            }
        }

    }
    for (int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {
            image[i][j].rgbtRed = t[i][j].rgbtRed, image[i][j].rgbtGreen = t[i][j].rgbtGreen, image[i][j].rgbtBlue = t[i][j].rgbtBlue;
        }
    }
    return;
}

// Detect edges
void edges(int height, int width, RGBTRIPLE image[height][width])
{
    RGBTRIPLE t[height][width];
    int gx[3][3] = {{-1, 0, 1}, {-2, 0, 2}, {-1, 0, 1}};
    int gy[3][3] = {{-1, -2, -1}, {0, 0, 0}, {1, 2, 1}};

    for (int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {
            int gxR = 0, gxG = 0, gxB = 0;
            int gyR = 0, gyG = 0, gyB = 0;

            // for all elements that are not in the edges and corner (those are ignored and technically assigned as zero)
            for (int r = -1; r < 2; r++)
            {
                for (int c = -1; c < 2; c++)
                {
                    if (!(i + r < 0) && !(i + r > height - 1) && !(j + c < 0) && !(j + c > width - 1))
                    {
                        gxR += image[i + r][j + c].rgbtRed * gx[r + 1][c + 1], gxG += image[i + r][j + c].rgbtGreen * gx[r + 1][c + 1];
                        gxB += image[i + r][j + c].rgbtBlue * gx[r + 1][c + 1], gyR += image[i + r][j + c].rgbtRed * gy[r + 1][c + 1];
                        gyG += image[i + r][j + c].rgbtGreen * gy[r + 1][c + 1], gyB += image[i + r][j + c].rgbtBlue * gy[r + 1][c + 1];
                    }
                }
            }

            int red = round(sqrt(gxR * gxR + gyR * gyR));
            int green = round(sqrt(gxG * gxG + gyG * gyG));
            int blue = round(sqrt(gxB * gxB + gyB * gyB));

            // making sure that colors don't go over 255
            if (red < 255)
            {
                t[i][j].rgbtRed = red;
            }
            else
            {
                t[i][j].rgbtRed = 255;
            }
            if (green < 255)
            {
                t[i][j].rgbtGreen = green;
            }
            else
            {
                t[i][j].rgbtGreen = 255;
            }
            if (blue < 255)
            {
                t[i][j].rgbtBlue = blue;
            }
            else
            {
                t[i][j].rgbtBlue = 255;
            }

        }
    }

    // move from temporary grid to image
    for (int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {
            image[i][j].rgbtRed = t[i][j].rgbtRed, image[i][j].rgbtGreen = t[i][j].rgbtGreen, image[i][j].rgbtBlue = t[i][j].rgbtBlue;
        }
    }
    return;
}
