// Implements a dictionary's functionality

#include <ctype.h>
#include <stdbool.h>
#include <string.h>
#include <strings.h>
#include <stdlib.h>
#include <stdio.h>

#include "dictionary.h"

// Represents a node in a hash table
typedef struct node
{
    char word[LENGTH + 1];
    struct node *next;
}
node;

// Choose number of buckets in hash table
const unsigned int N = 26;

// Hash table
node *table[N];


// Returns true if word is in dictionary, else false
bool check(const char *word)
{
    int index = hash(word);
    node *access = table[index];

    while (access != NULL)
    {
        if (strcasecmp(word, access->word) == 0)
        {
            return true;
        }
        access = access->next;
    }
    return false;
}


// Hashes word to a number
unsigned int hash(const char *word)
{
    // Improve this hash function
    unsigned int hash = 0;
    for (int i = 0; i < strlen(word); i++)
    {
        hash += tolower(word[i]);
        hash = (hash * tolower(word[i])) % N;
    }
    return hash;
}


int wordcount = 0;
// Loads dictionary into memory, returning true if successful, else false
bool load(const char *dictionary)
{
    FILE *file = fopen(dictionary, "r");
    if (file == NULL)
    {
        printf("Error: file cannot be opened\n");
        return false;
    }
    char word[LENGTH + 1];
    while (fscanf(file, "%s", word) != EOF)
    {
        wordcount++;
        node *storeword = malloc(sizeof(node));
        if (storeword == NULL)
        {
            printf("Error: Memory Allocation using Malloc");
            return 1;
        }
        strcpy(storeword->word, word);
        int h = hash(storeword->word);
        storeword->next = table[h];
        table[h] = storeword;
    }
    fclose(file);
    return true;
}


// Returns number of words in dictionary if loaded, else 0 if not yet loaded
unsigned int size(void)
{
    return wordcount;
}


// Unloads dictionary from memory, returning true if successful, else false
bool unload(void)
{
    for (int i = 0; i < N; i++)
    {
        node *freeing = table[i];
        while (freeing != NULL)
        {
            node *temp = freeing;
            freeing = freeing->next;
            free(temp);
        }
    }
    return true;
}
