#include <cs50.h>
#include <stdio.h>
#include <string.h>

// Max number of candidates
#define MAX 9

// preferences[i][j] is number of voters who prefer i over j
int preferences[MAX][MAX];

// locked[i][j] means i is locked in over j
bool locked[MAX][MAX];

// Each pair has a winner, loser
typedef struct
{
    int winner;
    int loser;
} pair;

// Array of candidates
string candidates[MAX];
pair pairs[MAX * (MAX - 1) / 2];

int pair_count;
int candidate_count;

// Function prototypes
bool vote(int rank, string name, int ranks[]);
void record_preferences(int ranks[]);
void add_pairs(void);
void sort(pair array[], int len);
void sort_pairs(void);
void lock_pairs(void);
bool lock_cycle(int win, int lose);
void print_winner(void);

int main(int argc, string argv[])
{
    // Check for invalid usage
    if (argc < 2)
    {
        printf("Usage: tideman [candidate ...]\n");
        return 1;
    }

    // Populate array of candidates
    candidate_count = argc - 1;
    if (candidate_count > MAX)
    {
        printf("Maximum number of candidates is %i\n", MAX);
        return 2;
    }
    for (int i = 0; i < candidate_count; i++)
    {
        candidates[i] = argv[i + 1];
    }

    // Clear graph of locked in pairs
    for (int i = 0; i < candidate_count; i++)
    {
        for (int j = 0; j < candidate_count; j++)
        {
            locked[i][j] = false;
        }
    }

    pair_count = 0;
    int voter_count = get_int("Number of voters: ");

    // Query for votes
    for (int i = 0; i < voter_count; i++)
    {
        // ranks[i] is voter's ith preference
        int ranks[candidate_count];

        // Query for each rank
        for (int j = 0; j < candidate_count; j++)
        {
            string name = get_string("Rank %i: ", j + 1);

            if (!vote(j, name, ranks))
            {
                printf("Invalid vote.\n");
                return 3;
            }
        }

        record_preferences(ranks);

        printf("\n");
    }

    add_pairs();
    sort_pairs();
    lock_pairs();
    print_winner();
    return 0;
}

// Update ranks given a new vote
bool vote(int rank, string name, int ranks[])
{
    for (int i = 0; i < candidate_count; i++)
    {
        if (strcmp(name, candidates[i]) == 0)
        {
            ranks[rank] = i;
            return true;
        }
    }
    return false;
}

// Update preferences given one voter's ranks
void record_preferences(int ranks[])
{
    int n = candidate_count;
    for (int i = 0; i < n; i++)
    {
        for (int j = i + 1; j < n; j++)
        {
            preferences[ranks[i]][ranks[j]]++;
        }
    }
}

// Record pairs of candidates where one is preferred over the other
void add_pairs(void)
{
    int n = candidate_count;
    for (int i = 0; i < n; i++)
    {
        for (int j = i + 1; j < n; j++)
        {
            if (preferences[i][j] > preferences[j][i])
            {
                pairs[pair_count].winner = i;
                pairs[pair_count].loser = j;
                pair_count++;
            }
            else if (preferences[i][j] < preferences[j][i])
            {
                pairs[pair_count].winner = j;
                pairs[pair_count].loser = i;
                pair_count++;
            }
        }
    }
}

// Sort pairs in decreasing order by strength of victory
// MERGE SORT
void sort(pair p[], int len)
{
    if (len == 1)
    {
        return;
    }

    int mid = len / 2;
    int l = mid;
    int r = len - mid;

    pair left[l];
    pair right[r];

    for (int i = 0; i < len; i++)
    {
        if (i < l)
        {
            left[i] = p[i];
        }
        else
        {
            right[i - mid] = p[i];
        }
    }

    sort(left, l);
    sort(right, r);

    int lefty = 0, righty = 0;
    for (int i = 0; i < len; i++)
    {
        pair curl = left[lefty];
        pair curr = right[righty];
        if (righty >= r)
        {
            p[i] = curl;
            lefty++;
            continue;
        }
        else if (lefty >= l)
        {
            p[i] = curr;
            righty++;
            continue;
        }

        if (preferences[curl.winner][curl.loser] > preferences[curr.winner][curr.loser])
        {
            p[i] = curl;
            lefty++;
        }
        else
        {
            p[i] = curr;
            righty++;
        }
    }
}
// Sort pairs in decreasing order by strength of victory

void sort_pairs(void)
{
    sort(pairs, pair_count);
    return;
}

// Lock pairs into the candidate graph in order, without creating cycles
bool lock_cycle(int one, int two)
{
    int join = 0;
    int chart[candidate_count];
    for (int i = 0; i < candidate_count; i++)
    {
        if (locked[one][i])
        {
            if (i == two)
            {
                return true;
            }
            else
            {
                chart[join] = i;
                join++;
            }
        }
    }
    for (int i = 0; i < join; i++)
    {
        int line = chart[i];
        if (lock_cycle(line, two))
        {
            return true;
        }
    }
    return false;
}

void lock_pairs(void)
{
    // TODO
    for (int i = 0; i < pair_count; i++)
    {
        int win = pairs[i].winner, lose = pairs[i].loser;

        if (!lock_cycle(lose, win))
        {
            locked[win][lose] = true;
        }
    }
}

// Print the winner of the election
void print_winner(void)
{
    for (int i = 0; i < candidate_count; i++)
    {
        bool win = true;
        for (int j = 0; j < candidate_count; j++)
        {
            if (locked[j][i])
            {
                win = false;
            }
        }
        if (win)
        {
            printf("%s\n", candidates[i]);
        }
    }
}
